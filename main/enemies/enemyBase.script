local playerGO = "/main/gameLevel1.collection/player"
local DEATH_HASH = hash("death")
go.property("dead", false)
go.property("speedMultiplier", 100)
go.property("health", 100)

function init(self)
	self.bulletHitTimer = 50
	self.bloodSplashTimer = 50
	self.bloodSplashing = false
	go.set("#bloodSprite", "tint.w", 0.0)
end

function animationDone(self, message_id, message, sender)
	if message_id == hash("animation_done") then
		go.delete()
	end
end


function update(self, dt)
	self.bulletHitTimer = self.bulletHitTimer - (1000 * dt)
	self.bloodSplashTimer = self.bloodSplashTimer - (1000 * dt)
	if self.health <= 0 and not self.dead then
		sprite.play_flipbook("#sprite", DEATH_HASH, animationDone)
		self.dead = true
	elseif self.health > 0 then
		local playerPosition = go.get_position("/player")
		local myPosition = go.get_position()

		local distance = vmath.length(playerPosition - myPosition)

		if distance ~= 0 then
			local direction = vmath.normalize(playerPosition - myPosition)
			go.set_position(myPosition + (direction * self.speedMultiplier * dt))
		end
	end
	
end

function animationDoneBlood(self, message_id, message, sender)
	go.set("#bloodSprite", "tint.w", 0.0)
end

function on_message(self, message_id, message, sender)
	if (message_id == hash("contact_point_response")) and (message.other_group == hash("bullet")) and (self.bulletHitTimer < 0) then
		print("Hit!" .. os.time())
		self.health = self.health - 20
		self.bulletHitTimer = 50

		if self.bloodSplashTimer < 0 then
			self.bloodSplashTimer = 400
			go.set("#bloodSprite", "tint.w", 1.0)
			sprite.play_flipbook("#bloodSprite", "bloodSplash", animationDoneBlood)
		end
		
	end
end